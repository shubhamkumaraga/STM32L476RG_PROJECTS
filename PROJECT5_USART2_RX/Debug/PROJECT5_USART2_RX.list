
PROJECT5_USART2_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000220  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003a8  080003b0  000103b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003a8  080003a8  000103b0  2**0
                  CONTENTS
  4 .ARM          00000000  080003a8  080003a8  000103b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003a8  080003b0  000103b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003a8  080003a8  000103a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003ac  080003ac  000103ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  000103b0  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000103b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000052e  00000000  00000000  000103e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000137  00000000  00000000  0001090e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000060  00000000  00000000  00010a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000048  00000000  00000000  00010aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c35e  00000000  00000000  00010af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000518  00000000  00000000  0002ce4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009e188  00000000  00000000  0002d366  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000cb4ee  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000c4  00000000  00000000  000cb540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000390 	.word	0x08000390

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000390 	.word	0x08000390

080001c8 <main>:
void delayMS(int delay);
void USART2_Init(void);
char USART2_Read(void);

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
	char c;
	RCC->AHB2ENR |= (1<<0); // ENABLE GPIOA CLOCK
 80001ce:	4b18      	ldr	r3, [pc, #96]	; (8000230 <main+0x68>)
 80001d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001d2:	4a17      	ldr	r2, [pc, #92]	; (8000230 <main+0x68>)
 80001d4:	f043 0301 	orr.w	r3, r3, #1
 80001d8:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOA->MODER |= (1<<10); // SET PIN5 (INBUILT LED) AS GENERAL PURPOSE OUTPUT MODE (01)
 80001da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80001e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001e8:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1<<11);
 80001ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80001f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80001f8:	6013      	str	r3, [r2, #0]

	USART2_Init();
 80001fa:	f000 f81b 	bl	8000234 <USART2_Init>

	while(1)
	{
		c = USART2_Read();
 80001fe:	f000 f865 	bl	80002cc <USART2_Read>
 8000202:	4603      	mov	r3, r0
 8000204:	71fb      	strb	r3, [r7, #7]
		if(c=='A')
 8000206:	79fb      	ldrb	r3, [r7, #7]
 8000208:	2b41      	cmp	r3, #65	; 0x41
 800020a:	d108      	bne.n	800021e <main+0x56>
		{
			// ENABLE BUILTIN LED
			// GPIOA->ODR |= (1<<5);
			GPIOA->BSRR |= (1<<5);
 800020c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000210:	699b      	ldr	r3, [r3, #24]
 8000212:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000216:	f043 0320 	orr.w	r3, r3, #32
 800021a:	6193      	str	r3, [r2, #24]
 800021c:	e7ef      	b.n	80001fe <main+0x36>
		}
		else
		{
			// DISABLE BUILTIN LED
			// GPIOA->ODR &= ~(1<<5);
			GPIOA->BSRR |= (1<<21);
 800021e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000222:	699b      	ldr	r3, [r3, #24]
 8000224:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000228:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800022c:	6193      	str	r3, [r2, #24]
		c = USART2_Read();
 800022e:	e7e6      	b.n	80001fe <main+0x36>
 8000230:	40021000 	.word	0x40021000

08000234 <USART2_Init>:
		}
	}
}

void USART2_Init(void)
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
	// USART2 -> APB1 BUS
	RCC->APB1ENR1 |= (1<<17);
 8000238:	4b22      	ldr	r3, [pc, #136]	; (80002c4 <USART2_Init+0x90>)
 800023a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800023c:	4a21      	ldr	r2, [pc, #132]	; (80002c4 <USART2_Init+0x90>)
 800023e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000242:	6593      	str	r3, [r2, #88]	; 0x58
	// PA3 RX PIN -> AHB2 BUS - GPIOA
	RCC->AHB2ENR |= (1<<0);
 8000244:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <USART2_Init+0x90>)
 8000246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000248:	4a1e      	ldr	r2, [pc, #120]	; (80002c4 <USART2_Init+0x90>)
 800024a:	f043 0301 	orr.w	r3, r3, #1
 800024e:	64d3      	str	r3, [r2, #76]	; 0x4c
	// ALTERNATIVE FUNCTION REGISTER, 0111 FOR PA3 PIN
	GPIOA->AFR[0] |= (7<<12);
 8000250:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000254:	6a1b      	ldr	r3, [r3, #32]
 8000256:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800025a:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800025e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=  ~(1<<15);
 8000260:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000264:	6a1b      	ldr	r3, [r3, #32]
 8000266:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800026a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800026e:	6213      	str	r3, [r2, #32]
	// MODE REGISTER, 10 FOR PA3 PIN, ALTERNATIVE FUNCITON MODE
	GPIOA->MODER |= (1<<7);
 8000270:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800027a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1<<6);
 8000280:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800028a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800028e:	6013      	str	r3, [r2, #0]
	// USART2 BAUD RATE 9600 FOR 80MHz
	//0x208D - 9600 baud rate for 40MHz
	USART2->BRR |= 0x0683; // 2400 at 80MHz
 8000290:	4b0d      	ldr	r3, [pc, #52]	; (80002c8 <USART2_Init+0x94>)
 8000292:	68db      	ldr	r3, [r3, #12]
 8000294:	4a0c      	ldr	r2, [pc, #48]	; (80002c8 <USART2_Init+0x94>)
 8000296:	f443 63d0 	orr.w	r3, r3, #1664	; 0x680
 800029a:	f043 0303 	orr.w	r3, r3, #3
 800029e:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= (1<<2); // RE ENABLED
 80002a0:	4b09      	ldr	r3, [pc, #36]	; (80002c8 <USART2_Init+0x94>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a08      	ldr	r2, [pc, #32]	; (80002c8 <USART2_Init+0x94>)
 80002a6:	f043 0304 	orr.w	r3, r3, #4
 80002aa:	6013      	str	r3, [r2, #0]
	USART2->CR1 |= (1<<0); // UE ENABLED
 80002ac:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <USART2_Init+0x94>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a05      	ldr	r2, [pc, #20]	; (80002c8 <USART2_Init+0x94>)
 80002b2:	f043 0301 	orr.w	r3, r3, #1
 80002b6:	6013      	str	r3, [r2, #0]
}
 80002b8:	bf00      	nop
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	40021000 	.word	0x40021000
 80002c8:	40004400 	.word	0x40004400

080002cc <USART2_Read>:

char USART2_Read(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
	while(!(USART2->ISR & (1<<5)));
 80002d0:	bf00      	nop
 80002d2:	4b07      	ldr	r3, [pc, #28]	; (80002f0 <USART2_Read+0x24>)
 80002d4:	69db      	ldr	r3, [r3, #28]
 80002d6:	f003 0320 	and.w	r3, r3, #32
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d0f9      	beq.n	80002d2 <USART2_Read+0x6>
	return USART2->RDR;
 80002de:	4b04      	ldr	r3, [pc, #16]	; (80002f0 <USART2_Read+0x24>)
 80002e0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80002e2:	b29b      	uxth	r3, r3
 80002e4:	b2db      	uxtb	r3, r3
}
 80002e6:	4618      	mov	r0, r3
 80002e8:	46bd      	mov	sp, r7
 80002ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ee:	4770      	bx	lr
 80002f0:	40004400 	.word	0x40004400

080002f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002f4:	480d      	ldr	r0, [pc, #52]	; (800032c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002f8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002fc:	480c      	ldr	r0, [pc, #48]	; (8000330 <LoopForever+0x6>)
  ldr r1, =_edata
 80002fe:	490d      	ldr	r1, [pc, #52]	; (8000334 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000300:	4a0d      	ldr	r2, [pc, #52]	; (8000338 <LoopForever+0xe>)
  movs r3, #0
 8000302:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000304:	e002      	b.n	800030c <LoopCopyDataInit>

08000306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800030a:	3304      	adds	r3, #4

0800030c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800030c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800030e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000310:	d3f9      	bcc.n	8000306 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000312:	4a0a      	ldr	r2, [pc, #40]	; (800033c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000314:	4c0a      	ldr	r4, [pc, #40]	; (8000340 <LoopForever+0x16>)
  movs r3, #0
 8000316:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000318:	e001      	b.n	800031e <LoopFillZerobss>

0800031a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800031a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800031c:	3204      	adds	r2, #4

0800031e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800031e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000320:	d3fb      	bcc.n	800031a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000322:	f000 f811 	bl	8000348 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000326:	f7ff ff4f 	bl	80001c8 <main>

0800032a <LoopForever>:

LoopForever:
    b LoopForever
 800032a:	e7fe      	b.n	800032a <LoopForever>
  ldr   r0, =_estack
 800032c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000334:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000338:	080003b0 	.word	0x080003b0
  ldr r2, =_sbss
 800033c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000340:	2000001c 	.word	0x2000001c

08000344 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000344:	e7fe      	b.n	8000344 <ADC1_2_IRQHandler>
	...

08000348 <__libc_init_array>:
 8000348:	b570      	push	{r4, r5, r6, lr}
 800034a:	4d0d      	ldr	r5, [pc, #52]	; (8000380 <__libc_init_array+0x38>)
 800034c:	4c0d      	ldr	r4, [pc, #52]	; (8000384 <__libc_init_array+0x3c>)
 800034e:	1b64      	subs	r4, r4, r5
 8000350:	10a4      	asrs	r4, r4, #2
 8000352:	2600      	movs	r6, #0
 8000354:	42a6      	cmp	r6, r4
 8000356:	d109      	bne.n	800036c <__libc_init_array+0x24>
 8000358:	4d0b      	ldr	r5, [pc, #44]	; (8000388 <__libc_init_array+0x40>)
 800035a:	4c0c      	ldr	r4, [pc, #48]	; (800038c <__libc_init_array+0x44>)
 800035c:	f000 f818 	bl	8000390 <_init>
 8000360:	1b64      	subs	r4, r4, r5
 8000362:	10a4      	asrs	r4, r4, #2
 8000364:	2600      	movs	r6, #0
 8000366:	42a6      	cmp	r6, r4
 8000368:	d105      	bne.n	8000376 <__libc_init_array+0x2e>
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000370:	4798      	blx	r3
 8000372:	3601      	adds	r6, #1
 8000374:	e7ee      	b.n	8000354 <__libc_init_array+0xc>
 8000376:	f855 3b04 	ldr.w	r3, [r5], #4
 800037a:	4798      	blx	r3
 800037c:	3601      	adds	r6, #1
 800037e:	e7f2      	b.n	8000366 <__libc_init_array+0x1e>
 8000380:	080003a8 	.word	0x080003a8
 8000384:	080003a8 	.word	0x080003a8
 8000388:	080003a8 	.word	0x080003a8
 800038c:	080003ac 	.word	0x080003ac

08000390 <_init>:
 8000390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000392:	bf00      	nop
 8000394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000396:	bc08      	pop	{r3}
 8000398:	469e      	mov	lr, r3
 800039a:	4770      	bx	lr

0800039c <_fini>:
 800039c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800039e:	bf00      	nop
 80003a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003a2:	bc08      	pop	{r3}
 80003a4:	469e      	mov	lr, r3
 80003a6:	4770      	bx	lr
