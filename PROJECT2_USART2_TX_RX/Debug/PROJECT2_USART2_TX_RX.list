
PROJECT2_USART2_TX_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000027c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000404  08000404  00010404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800040c  0800040c  00010414  2**0
                  CONTENTS
  4 .ARM          00000000  0800040c  0800040c  00010414  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800040c  08000414  00010414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800040c  0800040c  0001040c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000410  08000410  00010410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00010414  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010414  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000583  00000000  00000000  00010444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000018b  00000000  00000000  000109c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000070  00000000  00000000  00010b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000058  00000000  00000000  00010bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c35e  00000000  00000000  00010c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000057b  00000000  00000000  0002cf7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009e1b9  00000000  00000000  0002d4f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000cb6b2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000110  00000000  00000000  000cb704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080003ec 	.word	0x080003ec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080003ec 	.word	0x080003ec

080001c8 <main>:
char USART2_Write(int ch);
void USART2_Text_Write(char *text);
char USART2_Read(void);

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0

	char c;
	USART2_init();
 80001ce:	f000 f819 	bl	8000204 <USART2_init>

	while(1)
	{
		USART2_Text_Write("HELLO\r\n");
 80001d2:	480b      	ldr	r0, [pc, #44]	; (8000200 <main+0x38>)
 80001d4:	f000 f874 	bl	80002c0 <USART2_Text_Write>
		Delay_MS(100);
 80001d8:	2064      	movs	r0, #100	; 0x64
 80001da:	f000 f89b 	bl	8000314 <Delay_MS>
		c = USART2_Read();
 80001de:	f000 f885 	bl	80002ec <USART2_Read>
 80001e2:	4603      	mov	r3, r0
 80001e4:	71fb      	strb	r3, [r7, #7]
		if(c=='a')
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	2b61      	cmp	r3, #97	; 0x61
 80001ea:	d102      	bne.n	80001f2 <main+0x2a>
			USART2_Write('A');
 80001ec:	2041      	movs	r0, #65	; 0x41
 80001ee:	f000 f84b 	bl	8000288 <USART2_Write>
	    if(c=='b')
 80001f2:	79fb      	ldrb	r3, [r7, #7]
 80001f4:	2b62      	cmp	r3, #98	; 0x62
 80001f6:	d1ec      	bne.n	80001d2 <main+0xa>
	    	USART2_Write('B');
 80001f8:	2042      	movs	r0, #66	; 0x42
 80001fa:	f000 f845 	bl	8000288 <USART2_Write>
		USART2_Text_Write("HELLO\r\n");
 80001fe:	e7e8      	b.n	80001d2 <main+0xa>
 8000200:	08000404 	.word	0x08000404

08000204 <USART2_init>:
	}

}

void USART2_init(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	RCC->AHB2ENR  |=  (1<<0);             // Enable clock for GPIOA
 8000208:	4b1d      	ldr	r3, [pc, #116]	; (8000280 <USART2_init+0x7c>)
 800020a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800020c:	4a1c      	ldr	r2, [pc, #112]	; (8000280 <USART2_init+0x7c>)
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	64d3      	str	r3, [r2, #76]	; 0x4c
	RCC->APB1ENR1 |=  (1<<17);            // Enable clock for USART2
 8000214:	4b1a      	ldr	r3, [pc, #104]	; (8000280 <USART2_init+0x7c>)
 8000216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000218:	4a19      	ldr	r2, [pc, #100]	; (8000280 <USART2_init+0x7c>)
 800021a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800021e:	6593      	str	r3, [r2, #88]	; 0x58
	GPIOA->AFR[0] |=  (7<<12);            // Set PA3 as RX pin
 8000220:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000224:	6a1b      	ldr	r3, [r3, #32]
 8000226:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800022a:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800022e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  (7<<8);             // Set PA2 as TX pin
 8000230:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000234:	6a1b      	ldr	r3, [r3, #32]
 8000236:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800023a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800023e:	6213      	str	r3, [r2, #32]
	GPIOA->MODER  |=  ((1<<5) | (1<<7));  // Set mode as alternate function mode
 8000240:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800024a:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800024e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER  &= ~((1<<4) | (1<<6));
 8000250:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800025a:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 800025e:	6013      	str	r3, [r2, #0]

	USART2->BRR    =  0x208D;             // 9600 baud rate
 8000260:	4b08      	ldr	r3, [pc, #32]	; (8000284 <USART2_init+0x80>)
 8000262:	f242 028d 	movw	r2, #8333	; 0x208d
 8000266:	60da      	str	r2, [r3, #12]
	USART2->CR1   |=  ((1<<2) | (1<<3) | (1<<0));
 8000268:	4b06      	ldr	r3, [pc, #24]	; (8000284 <USART2_init+0x80>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a05      	ldr	r2, [pc, #20]	; (8000284 <USART2_init+0x80>)
 800026e:	f043 030d 	orr.w	r3, r3, #13
 8000272:	6013      	str	r3, [r2, #0]
}
 8000274:	bf00      	nop
 8000276:	46bd      	mov	sp, r7
 8000278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	40021000 	.word	0x40021000
 8000284:	40004400 	.word	0x40004400

08000288 <USART2_Write>:

char USART2_Write(int ch)
{
 8000288:	b480      	push	{r7}
 800028a:	b083      	sub	sp, #12
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
	while(!(USART2->ISR & (1<<7))){}
 8000290:	bf00      	nop
 8000292:	4b0a      	ldr	r3, [pc, #40]	; (80002bc <USART2_Write+0x34>)
 8000294:	69db      	ldr	r3, [r3, #28]
 8000296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800029a:	2b00      	cmp	r3, #0
 800029c:	d0f9      	beq.n	8000292 <USART2_Write+0xa>
	USART2->TDR = (ch & 0xff);
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	b29a      	uxth	r2, r3
 80002a2:	4b06      	ldr	r3, [pc, #24]	; (80002bc <USART2_Write+0x34>)
 80002a4:	b2d2      	uxtb	r2, r2
 80002a6:	b292      	uxth	r2, r2
 80002a8:	851a      	strh	r2, [r3, #40]	; 0x28
	return ch;
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	b2db      	uxtb	r3, r3
}
 80002ae:	4618      	mov	r0, r3
 80002b0:	370c      	adds	r7, #12
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	40004400 	.word	0x40004400

080002c0 <USART2_Text_Write>:

void USART2_Text_Write(char *text)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
	while(*text)
 80002c8:	e006      	b.n	80002d8 <USART2_Text_Write+0x18>
		USART2_Write(*text++);
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	1c5a      	adds	r2, r3, #1
 80002ce:	607a      	str	r2, [r7, #4]
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	4618      	mov	r0, r3
 80002d4:	f7ff ffd8 	bl	8000288 <USART2_Write>
	while(*text)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d1f4      	bne.n	80002ca <USART2_Text_Write+0xa>
}
 80002e0:	bf00      	nop
 80002e2:	bf00      	nop
 80002e4:	3708      	adds	r7, #8
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}
	...

080002ec <USART2_Read>:

char USART2_Read(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
	while(!(USART2->ISR & (1<<5))){}
 80002f0:	bf00      	nop
 80002f2:	4b07      	ldr	r3, [pc, #28]	; (8000310 <USART2_Read+0x24>)
 80002f4:	69db      	ldr	r3, [r3, #28]
 80002f6:	f003 0320 	and.w	r3, r3, #32
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d0f9      	beq.n	80002f2 <USART2_Read+0x6>
	return (USART2->RDR);
 80002fe:	4b04      	ldr	r3, [pc, #16]	; (8000310 <USART2_Read+0x24>)
 8000300:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000302:	b29b      	uxth	r3, r3
 8000304:	b2db      	uxtb	r3, r3
}
 8000306:	4618      	mov	r0, r3
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr
 8000310:	40004400 	.word	0x40004400

08000314 <Delay_MS>:

void Delay_MS(int delay)
{
 8000314:	b480      	push	{r7}
 8000316:	b085      	sub	sp, #20
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
	int i;
	for(;delay>0;delay--)
 800031c:	e00d      	b.n	800033a <Delay_MS+0x26>
		for(i=0;i<=3195;i++);
 800031e:	2300      	movs	r3, #0
 8000320:	60fb      	str	r3, [r7, #12]
 8000322:	e002      	b.n	800032a <Delay_MS+0x16>
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	3301      	adds	r3, #1
 8000328:	60fb      	str	r3, [r7, #12]
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	f640 427b 	movw	r2, #3195	; 0xc7b
 8000330:	4293      	cmp	r3, r2
 8000332:	ddf7      	ble.n	8000324 <Delay_MS+0x10>
	for(;delay>0;delay--)
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	3b01      	subs	r3, #1
 8000338:	607b      	str	r3, [r7, #4]
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	2b00      	cmp	r3, #0
 800033e:	dcee      	bgt.n	800031e <Delay_MS+0xa>
}
 8000340:	bf00      	nop
 8000342:	bf00      	nop
 8000344:	3714      	adds	r7, #20
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr
	...

08000350 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000350:	480d      	ldr	r0, [pc, #52]	; (8000388 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000352:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000354:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000358:	480c      	ldr	r0, [pc, #48]	; (800038c <LoopForever+0x6>)
  ldr r1, =_edata
 800035a:	490d      	ldr	r1, [pc, #52]	; (8000390 <LoopForever+0xa>)
  ldr r2, =_sidata
 800035c:	4a0d      	ldr	r2, [pc, #52]	; (8000394 <LoopForever+0xe>)
  movs r3, #0
 800035e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000360:	e002      	b.n	8000368 <LoopCopyDataInit>

08000362 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000362:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000364:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000366:	3304      	adds	r3, #4

08000368 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000368:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800036a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800036c:	d3f9      	bcc.n	8000362 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800036e:	4a0a      	ldr	r2, [pc, #40]	; (8000398 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000370:	4c0a      	ldr	r4, [pc, #40]	; (800039c <LoopForever+0x16>)
  movs r3, #0
 8000372:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000374:	e001      	b.n	800037a <LoopFillZerobss>

08000376 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000376:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000378:	3204      	adds	r2, #4

0800037a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800037a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800037c:	d3fb      	bcc.n	8000376 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800037e:	f000 f811 	bl	80003a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000382:	f7ff ff21 	bl	80001c8 <main>

08000386 <LoopForever>:

LoopForever:
    b LoopForever
 8000386:	e7fe      	b.n	8000386 <LoopForever>
  ldr   r0, =_estack
 8000388:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800038c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000390:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000394:	08000414 	.word	0x08000414
  ldr r2, =_sbss
 8000398:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800039c:	2000001c 	.word	0x2000001c

080003a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003a0:	e7fe      	b.n	80003a0 <ADC1_2_IRQHandler>
	...

080003a4 <__libc_init_array>:
 80003a4:	b570      	push	{r4, r5, r6, lr}
 80003a6:	4d0d      	ldr	r5, [pc, #52]	; (80003dc <__libc_init_array+0x38>)
 80003a8:	4c0d      	ldr	r4, [pc, #52]	; (80003e0 <__libc_init_array+0x3c>)
 80003aa:	1b64      	subs	r4, r4, r5
 80003ac:	10a4      	asrs	r4, r4, #2
 80003ae:	2600      	movs	r6, #0
 80003b0:	42a6      	cmp	r6, r4
 80003b2:	d109      	bne.n	80003c8 <__libc_init_array+0x24>
 80003b4:	4d0b      	ldr	r5, [pc, #44]	; (80003e4 <__libc_init_array+0x40>)
 80003b6:	4c0c      	ldr	r4, [pc, #48]	; (80003e8 <__libc_init_array+0x44>)
 80003b8:	f000 f818 	bl	80003ec <_init>
 80003bc:	1b64      	subs	r4, r4, r5
 80003be:	10a4      	asrs	r4, r4, #2
 80003c0:	2600      	movs	r6, #0
 80003c2:	42a6      	cmp	r6, r4
 80003c4:	d105      	bne.n	80003d2 <__libc_init_array+0x2e>
 80003c6:	bd70      	pop	{r4, r5, r6, pc}
 80003c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003cc:	4798      	blx	r3
 80003ce:	3601      	adds	r6, #1
 80003d0:	e7ee      	b.n	80003b0 <__libc_init_array+0xc>
 80003d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d6:	4798      	blx	r3
 80003d8:	3601      	adds	r6, #1
 80003da:	e7f2      	b.n	80003c2 <__libc_init_array+0x1e>
 80003dc:	0800040c 	.word	0x0800040c
 80003e0:	0800040c 	.word	0x0800040c
 80003e4:	0800040c 	.word	0x0800040c
 80003e8:	08000410 	.word	0x08000410

080003ec <_init>:
 80003ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ee:	bf00      	nop
 80003f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003f2:	bc08      	pop	{r3}
 80003f4:	469e      	mov	lr, r3
 80003f6:	4770      	bx	lr

080003f8 <_fini>:
 80003f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fa:	bf00      	nop
 80003fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fe:	bc08      	pop	{r3}
 8000400:	469e      	mov	lr, r3
 8000402:	4770      	bx	lr
