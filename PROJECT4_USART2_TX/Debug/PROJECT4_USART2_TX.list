
PROJECT4_USART2_TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000244  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003cc  080003d4  000103d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003cc  080003cc  000103d4  2**0
                  CONTENTS
  4 .ARM          00000000  080003cc  080003cc  000103d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003cc  080003d4  000103d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003cc  080003cc  000103cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003d0  080003d0  000103d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  000103d4  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000103d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000528  00000000  00000000  00010404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000012c  00000000  00000000  0001092c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000060  00000000  00000000  00010a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000048  00000000  00000000  00010ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c35e  00000000  00000000  00010b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000548  00000000  00000000  0002ce5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009e189  00000000  00000000  0002d3a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000cb52f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000c8  00000000  00000000  000cb580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080003b4 	.word	0x080003b4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080003b4 	.word	0x080003b4

080001c8 <main>:
void delayMS(int delay);
void USART2_Init(void);
void USART2_Write(int ch);

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	USART2_Init();
 80001cc:	f000 f820 	bl	8000210 <USART2_Init>

	while(1)
	{
		USART2_Write('S');
 80001d0:	2053      	movs	r0, #83	; 0x53
 80001d2:	f000 f869 	bl	80002a8 <USART2_Write>
		USART2_Write('H');
 80001d6:	2048      	movs	r0, #72	; 0x48
 80001d8:	f000 f866 	bl	80002a8 <USART2_Write>
		USART2_Write('U');
 80001dc:	2055      	movs	r0, #85	; 0x55
 80001de:	f000 f863 	bl	80002a8 <USART2_Write>
		USART2_Write('B');
 80001e2:	2042      	movs	r0, #66	; 0x42
 80001e4:	f000 f860 	bl	80002a8 <USART2_Write>
		USART2_Write('H');
 80001e8:	2048      	movs	r0, #72	; 0x48
 80001ea:	f000 f85d 	bl	80002a8 <USART2_Write>
		USART2_Write('A');
 80001ee:	2041      	movs	r0, #65	; 0x41
 80001f0:	f000 f85a 	bl	80002a8 <USART2_Write>
		USART2_Write('M');
 80001f4:	204d      	movs	r0, #77	; 0x4d
 80001f6:	f000 f857 	bl	80002a8 <USART2_Write>
		USART2_Write('\r');
 80001fa:	200d      	movs	r0, #13
 80001fc:	f000 f854 	bl	80002a8 <USART2_Write>
		USART2_Write('\n');
 8000200:	200a      	movs	r0, #10
 8000202:	f000 f851 	bl	80002a8 <USART2_Write>
		delayMS(100);
 8000206:	2064      	movs	r0, #100	; 0x64
 8000208:	f000 f868 	bl	80002dc <delayMS>
		USART2_Write('S');
 800020c:	e7e0      	b.n	80001d0 <main+0x8>
	...

08000210 <USART2_Init>:
	}
}

void USART2_Init(void)
{
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0
	// USART2 -> APB1 BUS
	RCC->APB1ENR1 |= (1<<17);
 8000214:	4b22      	ldr	r3, [pc, #136]	; (80002a0 <USART2_Init+0x90>)
 8000216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000218:	4a21      	ldr	r2, [pc, #132]	; (80002a0 <USART2_Init+0x90>)
 800021a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800021e:	6593      	str	r3, [r2, #88]	; 0x58
	// PA2 TX PIN -> AHB2 BUS
	RCC->AHB2ENR |= (1<<0);
 8000220:	4b1f      	ldr	r3, [pc, #124]	; (80002a0 <USART2_Init+0x90>)
 8000222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000224:	4a1e      	ldr	r2, [pc, #120]	; (80002a0 <USART2_Init+0x90>)
 8000226:	f043 0301 	orr.w	r3, r3, #1
 800022a:	64d3      	str	r3, [r2, #76]	; 0x4c
	// ALTERNATIVE FUNCTION REGISTER, 0111 FOR PA2 PIN
	GPIOA->AFR[0] |= (7<<8);
 800022c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000230:	6a1b      	ldr	r3, [r3, #32]
 8000232:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000236:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800023a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=  ~(1<<11);
 800023c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000240:	6a1b      	ldr	r3, [r3, #32]
 8000242:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000246:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800024a:	6213      	str	r3, [r2, #32]
	// MODE REGISTER, 10 FOR PA2 PIN, ALTERNATIVE FUNCITON MODE
	GPIOA->MODER |= (1<<5);
 800024c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000256:	f043 0320 	orr.w	r3, r3, #32
 800025a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1<<4);
 800025c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000266:	f023 0310 	bic.w	r3, r3, #16
 800026a:	6013      	str	r3, [r2, #0]
	// USART2 BAUD RATE 9600 FOR 80MHz
	//0x208D // 9600 baud rate for 40MHz
	USART2->BRR |= 0x0683; // 2400 at 80MHz
 800026c:	4b0d      	ldr	r3, [pc, #52]	; (80002a4 <USART2_Init+0x94>)
 800026e:	68db      	ldr	r3, [r3, #12]
 8000270:	4a0c      	ldr	r2, [pc, #48]	; (80002a4 <USART2_Init+0x94>)
 8000272:	f443 63d0 	orr.w	r3, r3, #1664	; 0x680
 8000276:	f043 0303 	orr.w	r3, r3, #3
 800027a:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= (1<<3); // TE ENABLED
 800027c:	4b09      	ldr	r3, [pc, #36]	; (80002a4 <USART2_Init+0x94>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a08      	ldr	r2, [pc, #32]	; (80002a4 <USART2_Init+0x94>)
 8000282:	f043 0308 	orr.w	r3, r3, #8
 8000286:	6013      	str	r3, [r2, #0]
	USART2->CR1 |= (1<<0); // UE ENABLED
 8000288:	4b06      	ldr	r3, [pc, #24]	; (80002a4 <USART2_Init+0x94>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a05      	ldr	r2, [pc, #20]	; (80002a4 <USART2_Init+0x94>)
 800028e:	f043 0301 	orr.w	r3, r3, #1
 8000292:	6013      	str	r3, [r2, #0]
}
 8000294:	bf00      	nop
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	40021000 	.word	0x40021000
 80002a4:	40004400 	.word	0x40004400

080002a8 <USART2_Write>:

void USART2_Write(int ch)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
	while(!(USART2->ISR & (1<<7)));
 80002b0:	bf00      	nop
 80002b2:	4b09      	ldr	r3, [pc, #36]	; (80002d8 <USART2_Write+0x30>)
 80002b4:	69db      	ldr	r3, [r3, #28]
 80002b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d0f9      	beq.n	80002b2 <USART2_Write+0xa>
	USART2->TDR = (ch & 0xFF);
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	b29a      	uxth	r2, r3
 80002c2:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <USART2_Write+0x30>)
 80002c4:	b2d2      	uxtb	r2, r2
 80002c6:	b292      	uxth	r2, r2
 80002c8:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80002ca:	bf00      	nop
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	40004400 	.word	0x40004400

080002dc <delayMS>:

void delayMS(int delay)
{
 80002dc:	b480      	push	{r7}
 80002de:	b085      	sub	sp, #20
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
	int i;
	for( ; delay>0; delay--)
 80002e4:	e00d      	b.n	8000302 <delayMS+0x26>
		for(i=0;i<=3195; i++);
 80002e6:	2300      	movs	r3, #0
 80002e8:	60fb      	str	r3, [r7, #12]
 80002ea:	e002      	b.n	80002f2 <delayMS+0x16>
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	3301      	adds	r3, #1
 80002f0:	60fb      	str	r3, [r7, #12]
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	f640 427b 	movw	r2, #3195	; 0xc7b
 80002f8:	4293      	cmp	r3, r2
 80002fa:	ddf7      	ble.n	80002ec <delayMS+0x10>
	for( ; delay>0; delay--)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	3b01      	subs	r3, #1
 8000300:	607b      	str	r3, [r7, #4]
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	2b00      	cmp	r3, #0
 8000306:	dcee      	bgt.n	80002e6 <delayMS+0xa>
}
 8000308:	bf00      	nop
 800030a:	bf00      	nop
 800030c:	3714      	adds	r7, #20
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr
	...

08000318 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000318:	480d      	ldr	r0, [pc, #52]	; (8000350 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800031a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800031c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000320:	480c      	ldr	r0, [pc, #48]	; (8000354 <LoopForever+0x6>)
  ldr r1, =_edata
 8000322:	490d      	ldr	r1, [pc, #52]	; (8000358 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000324:	4a0d      	ldr	r2, [pc, #52]	; (800035c <LoopForever+0xe>)
  movs r3, #0
 8000326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000328:	e002      	b.n	8000330 <LoopCopyDataInit>

0800032a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800032a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800032c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800032e:	3304      	adds	r3, #4

08000330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000334:	d3f9      	bcc.n	800032a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000336:	4a0a      	ldr	r2, [pc, #40]	; (8000360 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000338:	4c0a      	ldr	r4, [pc, #40]	; (8000364 <LoopForever+0x16>)
  movs r3, #0
 800033a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800033c:	e001      	b.n	8000342 <LoopFillZerobss>

0800033e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800033e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000340:	3204      	adds	r2, #4

08000342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000344:	d3fb      	bcc.n	800033e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000346:	f000 f811 	bl	800036c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800034a:	f7ff ff3d 	bl	80001c8 <main>

0800034e <LoopForever>:

LoopForever:
    b LoopForever
 800034e:	e7fe      	b.n	800034e <LoopForever>
  ldr   r0, =_estack
 8000350:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000354:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000358:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800035c:	080003d4 	.word	0x080003d4
  ldr r2, =_sbss
 8000360:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000364:	2000001c 	.word	0x2000001c

08000368 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000368:	e7fe      	b.n	8000368 <ADC1_2_IRQHandler>
	...

0800036c <__libc_init_array>:
 800036c:	b570      	push	{r4, r5, r6, lr}
 800036e:	4d0d      	ldr	r5, [pc, #52]	; (80003a4 <__libc_init_array+0x38>)
 8000370:	4c0d      	ldr	r4, [pc, #52]	; (80003a8 <__libc_init_array+0x3c>)
 8000372:	1b64      	subs	r4, r4, r5
 8000374:	10a4      	asrs	r4, r4, #2
 8000376:	2600      	movs	r6, #0
 8000378:	42a6      	cmp	r6, r4
 800037a:	d109      	bne.n	8000390 <__libc_init_array+0x24>
 800037c:	4d0b      	ldr	r5, [pc, #44]	; (80003ac <__libc_init_array+0x40>)
 800037e:	4c0c      	ldr	r4, [pc, #48]	; (80003b0 <__libc_init_array+0x44>)
 8000380:	f000 f818 	bl	80003b4 <_init>
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	10a4      	asrs	r4, r4, #2
 8000388:	2600      	movs	r6, #0
 800038a:	42a6      	cmp	r6, r4
 800038c:	d105      	bne.n	800039a <__libc_init_array+0x2e>
 800038e:	bd70      	pop	{r4, r5, r6, pc}
 8000390:	f855 3b04 	ldr.w	r3, [r5], #4
 8000394:	4798      	blx	r3
 8000396:	3601      	adds	r6, #1
 8000398:	e7ee      	b.n	8000378 <__libc_init_array+0xc>
 800039a:	f855 3b04 	ldr.w	r3, [r5], #4
 800039e:	4798      	blx	r3
 80003a0:	3601      	adds	r6, #1
 80003a2:	e7f2      	b.n	800038a <__libc_init_array+0x1e>
 80003a4:	080003cc 	.word	0x080003cc
 80003a8:	080003cc 	.word	0x080003cc
 80003ac:	080003cc 	.word	0x080003cc
 80003b0:	080003d0 	.word	0x080003d0

080003b4 <_init>:
 80003b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003b6:	bf00      	nop
 80003b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ba:	bc08      	pop	{r3}
 80003bc:	469e      	mov	lr, r3
 80003be:	4770      	bx	lr

080003c0 <_fini>:
 80003c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003c2:	bf00      	nop
 80003c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003c6:	bc08      	pop	{r3}
 80003c8:	469e      	mov	lr, r3
 80003ca:	4770      	bx	lr
